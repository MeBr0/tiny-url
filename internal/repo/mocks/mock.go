// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/mebr0/tiny-url/internal/domain"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsers) Create(ctx context.Context, user domain.User) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsersMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsers)(nil).Create), ctx, user)
}

// GetByCredentials mocks base method.
func (m *MockUsers) GetByCredentials(ctx context.Context, email, password string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCredentials", ctx, email, password)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCredentials indicates an expected call of GetByCredentials.
func (mr *MockUsersMockRecorder) GetByCredentials(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCredentials", reflect.TypeOf((*MockUsers)(nil).GetByCredentials), ctx, email, password)
}

// List mocks base method.
func (m *MockUsers) List(ctx context.Context) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUsersMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsers)(nil).List), ctx)
}

// UpdateLastLogin mocks base method.
func (m *MockUsers) UpdateLastLogin(ctx context.Context, id primitive.ObjectID, lastLogin time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", ctx, id, lastLogin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockUsersMockRecorder) UpdateLastLogin(ctx, id, lastLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockUsers)(nil).UpdateLastLogin), ctx, id, lastLogin)
}

// MockURLs is a mock of URLs interface.
type MockURLs struct {
	ctrl     *gomock.Controller
	recorder *MockURLsMockRecorder
}

// MockURLsMockRecorder is the mock recorder for MockURLs.
type MockURLsMockRecorder struct {
	mock *MockURLs
}

// NewMockURLs creates a new mock instance.
func NewMockURLs(ctrl *gomock.Controller) *MockURLs {
	mock := &MockURLs{ctrl: ctrl}
	mock.recorder = &MockURLsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLs) EXPECT() *MockURLsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockURLs) Create(ctx context.Context, url domain.URL) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, url)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockURLsMockRecorder) Create(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockURLs)(nil).Create), ctx, url)
}

// Delete mocks base method.
func (m *MockURLs) Delete(ctx context.Context, alias string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockURLsMockRecorder) Delete(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockURLs)(nil).Delete), ctx, alias)
}

// Get mocks base method.
func (m *MockURLs) Get(ctx context.Context, alias string) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, alias)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLsMockRecorder) Get(ctx, alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLs)(nil).Get), ctx, alias)
}

// GetByOriginalAndOwner mocks base method.
func (m *MockURLs) GetByOriginalAndOwner(ctx context.Context, original string, owner primitive.ObjectID) (domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOriginalAndOwner", ctx, original, owner)
	ret0, _ := ret[0].(domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOriginalAndOwner indicates an expected call of GetByOriginalAndOwner.
func (mr *MockURLsMockRecorder) GetByOriginalAndOwner(ctx, original, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOriginalAndOwner", reflect.TypeOf((*MockURLs)(nil).GetByOriginalAndOwner), ctx, original, owner)
}

// ListByOwner mocks base method.
func (m *MockURLs) ListByOwner(ctx context.Context, userId primitive.ObjectID) ([]domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOwner", ctx, userId)
	ret0, _ := ret[0].([]domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOwner indicates an expected call of ListByOwner.
func (mr *MockURLsMockRecorder) ListByOwner(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOwner", reflect.TypeOf((*MockURLs)(nil).ListByOwner), ctx, userId)
}

// ListByOwnerAndExpiration mocks base method.
func (m *MockURLs) ListByOwnerAndExpiration(ctx context.Context, userId primitive.ObjectID, expired bool) ([]domain.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOwnerAndExpiration", ctx, userId, expired)
	ret0, _ := ret[0].([]domain.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOwnerAndExpiration indicates an expected call of ListByOwnerAndExpiration.
func (mr *MockURLsMockRecorder) ListByOwnerAndExpiration(ctx, userId, expired interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOwnerAndExpiration", reflect.TypeOf((*MockURLs)(nil).ListByOwnerAndExpiration), ctx, userId, expired)
}

// Prolong mocks base method.
func (m *MockURLs) Prolong(ctx context.Context, alias string, toProlong domain.URLProlong) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prolong", ctx, alias, toProlong)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prolong indicates an expected call of Prolong.
func (mr *MockURLsMockRecorder) Prolong(ctx, alias, toProlong interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prolong", reflect.TypeOf((*MockURLs)(nil).Prolong), ctx, alias, toProlong)
}
